{"name":"Oh Johnny","tagline":"Make use of *duino right in your browser.","body":"### So what is it with this Johnny?\r\n**Oh Johnny** enables you to watch when sensors are being connected to your \\*duino board and what kind of signal they produce. **Oh Johnny** makes use of the [Johnny-Five](https://github.com/rwaldron/johnny-five) library to read sensor data which in turn relies upon a [Firmata prototcol implementation](https://github.com/jgautier/firmata) for [Node.js](http://nodejs.org/).\r\n\r\n### How to use it\r\nSince **Oh Johnny** connects the physical world with the digital, a server needs to be started on the machine to which an \\*duino with the [Standard Firmata](http://www.firmata.org/wiki/Download#Arduino.2FWiring) is connected, before any browser client may read out and display its signals:\r\n\r\n```\r\n$ npm install # needed only once to install dependencies\r\n$ node server.js\r\n```\r\n\r\nAfter that, you may point your browser to `http://localhost:3000` and watch your Johnny in action. (This is where the project name starts to sound creepy*â€”Ed.*)\r\n\r\n### Current State\r\nRight now, **Oh Johnny** doesn't really read signals from your board, mainly because filtering out analog noises and detecting pin connects seems to be a project in itself. We decided to focus on signal display first, this is why your Johnny seems to be firing events on itself.\r\n\r\n### Help welcome!\r\nAnybody with a grasp of knowledge on electronics and/or Node.js programming is welcome to help with the analog noise/connection detection issues preventing this project from unleashing its full potential.\r\n\r\n### Roadmap\r\nIn no particular order:\r\n\r\n1. Pimp visuals (current plan: Speech bubbles next to pins)\r\n2. Record values and display as [sparklines](http://en.wikipedia.org/wiki/Sparkline) inside the bubble\r\n3. Get a working sensor connection detection\r\n4. Filter out noise from analog pins","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}